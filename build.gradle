buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'commons-httpclient:commons-httpclient:3.1'
    }
}

plugins {
    id 'groovy'
    id 'maven'
    id 'java-gradle-plugin'
    id 'org.ysb33r.gradletest' version '2.0-rc.5'
    id 'org.asciidoctor.convert' version '1.5.3'
    id 'com.gradle.plugin-publish' version '0.9.7'
    id 'com.github.hierynomus.license' version '0.14.0'
    id 'org.ysb33r.vfs' version '1.0'
    id "org.ajoberstar.git-publish" version '0.2.1'
}

targetCompatibility = 1.8
sourceCompatibility = 1.8

ext {
    spockGroovyVer = GroovySystem.version.replaceAll(/\.\d+$/,'')
    notSnapshot = { !version.endsWith('-SNAPSHOT') }
}

apply from : 'gradle/integration-tests.gradle'

repositories {
    jcenter()

    if(!notSnapshot()) {
        mavenLocal()
    }
}

dependencies {
    compile localGroovy()
    compile gradleApi()
    compile "org.ysb33r.gradle:grolifant:${grolifantVer}"
    compile "net.sourceforge.nekohtml:nekohtml:1.9.14"

    testCompile ("org.spockframework:spock-core:1.3-groovy-${spockGroovyVer}") {
        exclude module : 'groovy-all'
    }
    testCompile gradleTestKit()
//    testCompile "org.ysb33r.gradle:grolifant:${grolifantVer}"
}

test {
    systemProperties TERRAFORM_VERSION    : terraformTestVersions[0]
}

gradleTest {
    // tag::gradleTestVersions[]
    versions '4.3', '4.10.3', '5.6.2'
    // end::gradleTestVersions[]

    systemProperties 'org.ysb33r.gradle.terraform.uri'  : terraformTestCacheDir.absoluteFile.toURI()
    dependsOn jar

}

license {
    header = rootProject.file('config/HEADER')
    strictCheck = true
    ignoreFailures = false
    mapping {
        groovy ='DOUBLESLASH_STYLE'
    }
    ext.year = '2017-2019'
    excludes([
            '**/*.adoc', '**/*.md',
            '**/*.properties',
            '**/*CompatibilitySpec.groovy',
            '**/*.json'
    ])
}

task landingPage( type :  org.asciidoctor.gradle.AsciidoctorTask )

//apply from : 'gradle/build-documentation.gradle'
//apply from : 'gradle/publish-plugins.gradle'

//publishPlugins.mustRunAfter installDocs

task release {
    group "Release"
    description "Lifecycle task for release a new version"
    onlyIf notSnapshot
    onlyIf {!gradle.startParameter.offline}
    dependsOn build //, publishPlugins, installDocs
}
