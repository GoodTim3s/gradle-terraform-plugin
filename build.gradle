buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'commons-httpclient:commons-httpclient:3.1'
    }
}

plugins {
    id 'groovy'
    id 'maven'
    id 'codenarc'
    id 'idea'
    id 'java-gradle-plugin'
    id 'org.ysb33r.gradletest' version '2.0'
    id 'org.asciidoctor.jvm.convert' version '3.2.0'
    id 'org.asciidoctor.editorconfig' version '3.2.0'
    id 'com.gradle.plugin-publish' version '0.11.0'
    id 'com.github.hierynomus.license' version '0.14.0'
    id 'org.ysb33r.vfs' version '1.0'
    id 'org.ajoberstar.git-publish' version '2.1.1'
    id 'org.ysb33r.cloudci.appveyor.testreporter' version '2.5'
}

targetCompatibility = 1.8
sourceCompatibility = 1.8

ext {
    spockGroovyVer = GroovySystem.version.replaceAll(/\.\d+$/, '')
    notSnapshot = { !version.endsWith('-SNAPSHOT') }
}

apply from: rootProject.file('gradle/integration-tests.gradle')
apply from: rootProject.file('gradle/codenarc.gradle')

repositories {
    jcenter()

    if (!notSnapshot()) {
        mavenLocal()
    }
}

dependencies {
    compile localGroovy()
    compile gradleApi()
    compile "org.ysb33r.gradle:grolifant:${grolifantVer}"
    compile "net.sourceforge.nekohtml:nekohtml:1.9.14"

    testCompile("org.spockframework:spock-core:1.3-groovy-${spockGroovyVer}") {
        exclude module: 'groovy-all'
    }
    testCompile gradleTestKit()
}

test {
    systemProperties TERRAFORM_VERSION: terraformTestVersions[0]
}

gradleTest {

    ext {
        minVersion = '4.7'
    }
    versions minVersion
    // tag::gradleTestVersions[]
    versions '4.10.3', '5.6.3', '6.3'
    // end::gradleTestVersions[]

    systemProperties 'org.ysb33r.gradle.hashicorp.releases.uri': terraformTestCacheDir.absoluteFile.toURI()
    dependsOn jar, cacheTerraformBinaries
    shouldRunAfter integrationTest
}

license {
    header = rootProject.file('gradle/license/HEADER')
    strictCheck = true
    ignoreFailures = false
    mapping {
        java = 'SLASHSTAR_STYLE'
        groovy = 'SLASHSTAR_STYLE'
    }
    ext.year = '2017-2020'
    excludes([
        '**/*.adoc', '**/*.md',
        '**/*.properties',
        '**/*dsl.*Spec.groovy',
        '**/*.json'
    ])
}

task landingPage(type: org.asciidoctor.gradle.jvm.AsciidoctorTask)

apply from : 'gradle/build-documentation.gradle'
apply from : 'gradle/publish-plugins.gradle'

publishPlugins.mustRunAfter installDocs

task release {
    group "Release"
    description "Lifecycle task for release a new version"
    onlyIf notSnapshot
    onlyIf { !gradle.startParameter.offline }
    dependsOn build, publishPlugins, installDocs
}
