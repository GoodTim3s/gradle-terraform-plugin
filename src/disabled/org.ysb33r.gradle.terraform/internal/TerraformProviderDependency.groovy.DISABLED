package org.ysb33r.gradle.terraform.internal

import groovy.transform.CompileStatic
import org.gradle.api.Nullable
import org.gradle.api.Project
import org.gradle.api.artifacts.Dependency
import org.ysb33r.grashicorp.HashicorpUtils
import org.ysb33r.grolifant.api.ExclusiveFileAccess
import org.ysb33r.grolifant.api.OperatingSystem
import org.ysb33r.grolifant.api.dependencies.AbstractExternalNonRepositoryDependency
import org.ysb33r.grolifant.api.errors.DownloadFailedException

/**
 * @since 0.1
 */
@CompileStatic
class TerraformProviderDependency extends AbstractExternalNonRepositoryDependency {

    TerraformProviderDependency(final Project project, final String providerName ) {
        super(project,"terraform-provider-${providerName}",LATEST)
        this.providerName = providerName
        lockFile = new File(project.projectDir,'terraform.lock')
    }

    TerraformProviderDependency(final Project project, final String providerName, final String version ) {
        super(project,"terraform-provider-${providerName}",version)
        this.providerName = providerName
        lockFile = new File(project.projectDir,'terraform.lock')
    }

    @Override
    String getVersion() {
        String ver = super.getVersion()
        if(ver == LATEST) {
            if(lockFile.exists()) {
                ver = getVersionFromLockFile()
            }

            if(ver==null || ver == LATEST) {
                ver = getVersionFromRemote()
            }

            if(ver==null) {
                throw new DownloadFailedException("Could not determine latest version for Terraform provider '${getName()}'")
            }

            addVersionToLockFile(ver)
        }

        return ver
    }

    @Override
    protected Iterable<URI> getDownloadURIs() {
        final String ver = getVersion()
        final String host = "${HashicorpUtils.getDownloadBaseUri(getName())}/${ver}/${getName()}_${ver}_${HashicorpUtils.osArch(OS)}.zip"
        [host.toURI()]
    }

    @Override
    protected String getCachingGroup() {
        CACHING_GROUP
    }

    @Override
    protected String getDisplayName() {
        "${getName()}:${super.getVersion()}:${HashicorpUtils.osArch(OS)}"
    }

    /**
     * Creates and returns a new dependency with the property values of this one.
     *
     * @return The copy. Never returns null.
     */
    @Override
    Dependency copy() {
        new TerraformProviderDependency(project,this.providerName, project.gradle.startParameter.isOffline() ? super.getVersion() : getVersion() )
    }

    @Nullable
    private String getVersionFromRemote() {
        if(project.gradle.startParameter.isOffline()) {
            throw new DownloadFailedException("Cannot determine version for ${getName()} as Gradle is in offline mode")
        }

        try {
            HashicorpUtils.getLatestTerraformProviderVersion(this.providerName)
        } catch(Exception e) {
            throw new DownloadFailedException("Could not determine latest version for Terraform provider '${this.providerName}'",e)
        }
    }

    @Nullable
    private String getVersionFromLockFile() {
        final String moduleName = this.providerName
        String foundVer
        lockFileAccess.access(lockFile) {
            Properties props = new Properties()
            lockFile.withReader { Reader reader ->
                props.load(reader)
            }
            foundVer = props.getProperty(moduleName)
        }
        return foundVer
    }

    private void addVersionToLockFile(final String newVer) {
        final String moduleName = this.providerName
        lockFileAccess.access(lockFile) {
            Properties props = new Properties()
            if(lockFile.exists()) {
                lockFile.withReader { Reader reader ->
                    props.load(reader)
                }
            }
            props.setProperty(moduleName,newVer)
            lockFile.withWriter { Writer writer ->
                props.store(writer,"")
            }
        }
    }

    private File lockFile
    private final String providerName
    private final ExclusiveFileAccess lockFileAccess = new ExclusiveFileAccess(120000, 200)
    private final static String CACHING_GROUP = 'terraform-providers'
    private final static String LATEST = '+'
    private final static OperatingSystem OS = Downloader.OS
}
