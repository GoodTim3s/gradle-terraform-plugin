ext {

    codedTerraformVersion = (file('src/main/groovy/org/ysb33r/gradle/terraform/TerraformExtension.groovy').readLines().grep {
        it =~ /static\s+final\s+String\s+TERRAFORM_DEFAULT\s+=/
    })[0].replaceFirst(~/^(.+?["'])/,'').replaceFirst(~/(["'].*)$/,'')

    currentOS =  org.gradle.internal.os.OperatingSystem.current()
    terraformTestCacheDir = file("${buildDir}/terraform-binaries")

    // Always list the primary test version as the first one in this list.
    terraformTestVersions = [ codedTerraformVersion, '0.10.0' ]

}

configurations {
    downloadTestCompile {
        extendsFrom testCompile
    }
    downloadTestRuntime {
        extendsFrom downloadTestCompile, testRuntime
    }

}

sourceSets {
    downloadTest {
        java.srcDir file("src/downloadTest/java")
        groovy.srcDir file("src/downloadTest/groovy")
        resources.srcDir file("src/downloadTest/resources")
        compileClasspath = sourceSets.main.output +  configurations.downloadTestCompile
        runtimeClasspath = output + compileClasspath + configurations.downloadTestRuntime
    }
}

task cacheTerraformBinaries {

    enabled = !project.gradle.startParameter.offline

    terraformTestVersions.each { ver ->
        def terraformArch
        def terraformOS

        if(currentOS.windows) {
            terraformOS = 'windows'
            if (System.getProperty('os.arch').contains('64')) {
                terraformArch = 'amd64'
            } else {
                terraformArch = '386'
            }
        } else if (currentOS.linux) {
            terraformOS = 'linux'
            if (System.getProperty('os.arch').contains('64')) {
                terraformArch = 'amd64'
            } else {
                terraformArch = '386'
            }
        } else if (currentOS.macOsX) {
            terraformOS = 'darwin'
            terraformArch = 'amd64'
        }

        File target = file("${terraformTestCacheDir}/${ver}/terraform_${ver}_${terraformOS}_${terraformArch}.zip")
        outputs.file target
        onlyIf { !target.exists() }

        doLast {
            mkdir new File(terraformTestCacheDir,ver)
            vfs {
                cp "https://releases.hashicorp.com/terraform/${ver}/terraform_${ver}_${terraformOS}_${terraformArch}.zip",
                    new File(terraformTestCacheDir,ver),
                    overwrite : true, recursive : false
            }
        }
    }
}

task downloadTest(type: Test, dependsOn: jar) {
    testClassesDir = sourceSets.downloadTest.output.classesDir
    classpath = sourceSets.downloadTest.runtimeClasspath
    reports.html.destination = file("${reporting.baseDir}/downloadTest")

    systemProperties TERRAFORM_CACHE_DIR  : terraformTestCacheDir.absolutePath
    systemProperties TERRAFORM_VERSION    : terraformTestVersions[0]
    systemProperties RESOURCES_DIR        : file('src/downloadTest/resources').absolutePath

    mustRunAfter test
    dependsOn cacheTerraformBinaries

    enabled = !project.gradle.startParameter.isOffline()
}


check.dependsOn downloadTest

