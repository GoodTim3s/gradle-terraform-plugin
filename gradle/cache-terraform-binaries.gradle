ext {


    // These are Terraform plugins we are going to cache, so we don't have to download them everytime.
    terraformTestPlugins = [
        [name: 'local', version: '1.0.0'],
        [name: 'aws', 'version': '4.38.0']
    ]

    terraformOsArch = { ->
        def terraformArch
        def terraformOS

        if (OS.windows) {
            terraformOS = 'windows'
            if (System.getProperty('os.arch').contains('64')) {
                terraformArch = 'amd64'
            } else {
                terraformArch = '386'
            }
        } else if (OS.linux) {
            terraformOS = 'linux'
            if (System.getProperty('os.arch').contains('64')) {
                terraformArch = 'amd64'
            } else {
                terraformArch = '386'
            }
        } else if (OS.macOsX) {
            terraformOS = 'darwin'
            terraformArch = 'amd64'
        }

        "${terraformOS}_${terraformArch}".toString()
    }.call()
}


repositories {
    ivy {
        name 'Downloader for Terraform distributions'
        url 'https://releases.hashicorp.com/terraform/'
        resolve.dynamicMode = false
        layout 'pattern', {
            artifact "[revision]/[artifact]_[revision]_[classifier].[ext]"
        }
        content {
            includeGroup 'terraform'
        }
        metadataSources {
            artifact()
            ignoreGradleMetadataRedirection()
        }
    }

    ivy {
        name 'Downloader for Terraform providers'
        url 'https://releases.hashicorp.com/'
        resolve.dynamicMode = false
        layout 'pattern', {
            artifact "terraform-provider-[artifact]/[revision]/terraform-provider-[artifact]_[revision]_[classifier].[ext]"
        }
        content {
            includeGroup 'terraform-provider'
        }
        metadataSources {
            artifact()
            ignoreGradleMetadataRedirection()
        }
    }
}

terraformTestVersions.each { ver ->
    configurations.create("terraform_${ver}")
    dependencies.add("terraform_${ver}", "terraform:terraform:${ver}:${terraformOsArch}@zip")
}

terraformTestPlugins.each { plugin ->
    configurations.maybeCreate("terraform_provider_${plugin.version}")
    dependencies.add("terraform_provider_${plugin.version}", "terraform-provider:${plugin.name}:${plugin.version}:${terraformOsArch}@zip")
}

tasks.register('cacheTerraformBinaries') {
    enabled = !project.gradle.startParameter.offline
    outputs.dir(terraformTestCacheDir)
    doLast {
        delete terraformTestCacheDir
        copy {
            terraformTestVersions.each { ver ->
                from configurations.getByName("terraform_${ver}"), {
                    rename '^.+$', "terraform_${ver}_${terraformOsArch}.zip"
                    into "terraform/${ver}"
                }
            }
            terraformTestPlugins.each { plugin ->
                from configurations.getByName("terraform_provider_${plugin.version}"), {
                    rename '^.+$', "terraform-provider-${plugin.name}_${plugin.version}_${terraformOsArch}.zip"
                    into "terraform-provider-${plugin.name}/${plugin.version}/"
                }
            }
            into terraformTestCacheDir
        }
    }
}

