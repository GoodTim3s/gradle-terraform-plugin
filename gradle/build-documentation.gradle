import org.apache.tools.ant.filters.ReplaceTokens

ext {
    websitePublishFolder = file("${buildDir}/website/public")
}

groovydoc {
    destinationDir file("${buildDir}/docs/api")
}

task validateDocVersions {
    group 'Documentation'
    description 'Validates if current version is listed in (not SNAPSHOTS)'
    onlyIf notSnapshot

    ext {
        versionsFile = file('src/docs/landingPage/display-versions.txt')
    }

    doLast {
        if(null == versionsFile.readLines().find { it == version }) {
            throw new GradleException("Current version ${version} is not listed. " +
                    "Please correct ${versionsFile} before installing.")
        }
    }
}

task generateDocVersionsTable( type : Copy ) {

    ext {
        targetDir = file("${buildDir}/generated-docs")
    }

    group "Documentation"
    description 'Generates Asciidoc content for landing page'
    mustRunAfter validateDocVersions

    from 'src/docs/landingPage', {
        include 'display-versions.txt'
        rename ~/(.+)\.txt/,'$1.adoc'
        filter { String line ->
            if(line.startsWith('//') || line.startsWith('#')) {
                return null
            }
            final String docsLink = "link:${line}/docs/product-documentation.html[Docs]"
            final String apiLink  = "link:${line}/api/index.html[Groovydoc]"
            final String clogLink = "link:${line}/docs/changelog.html[Changelog]"
            return "a|*${line}*|${docsLink}|${apiLink}|${clogLink}"
        }
    }

    into targetDir
}


landingPage {
    dependsOn generateDocVersionsTable
    mustRunAfter validateDocVersions

    inputs.dir generateDocVersionsTable.targetDir
    sourceDir 'src/docs/landingPage'
    outputDir "${buildDir}/docs/landingPage"

    sources {
        include 'index.adoc'
    }

    attributes gendocdir : file("${generateDocVersionsTable.targetDir}").absolutePath,
            revnumber : "${version}",
            includetopdir : projectDir.absolutePath

}

asciidoctor {
    group "Documentation"
    description 'Generates the main product documentation & changelog'
    mustRunAfter validateDocVersions
    outputDir "${buildDir}/docs/product"
    inputs.files sourceSets.main.allSource
    inputs.files sourceSets.test.allSource
    inputs.files sourceSets.integrationTest.allSource

    sources {
        include 'product-documentation.adoc'
        include 'changelog.adoc'
    }

    attributes revnumber: version,
            'minimum-gradle-version': gradleTest.minVersion,
            includetopdir : projectDir.absolutePath,
            'gradle-javadoc' : "https://docs.gradle.org/${gradle.gradleVersion}/javadoc",
            'gradle-dsl' : "https://docs.gradle.org/${gradle.gradleVersion}/dsl"
}

task installDocs( type : Copy ) {

    dependsOn validateDocVersions, asciidoctor, landingPage, groovydoc, gitPublishReset

    from landingPage.outputDir
    into websitePublishFolder

    with copySpec {
        from asciidoctor.outputDir
        into "${version}/docs"
    }

    with copySpec {
        from groovydoc
        into "${version}/api"
    }

    onlyIf notSnapshot
}

task updateGitLabYmlInPages( type : Copy ) {
    description 'Copies current GitLab CI configuration to pages branch'
    from project.projectDir, {
        include '.gitlab*'
    }
    into websitePublishFolder.parentFile
}

gitPublish {

    repoUri = 'https://gitlab.com/ysb33rOrg/terraform-gradle-plugin.git'
    branch = 'pages'
    repoDir = websitePublishFolder.parentFile

    preserve {
        file('src/docs/landingPage/display-versions.txt').readLines().each { line ->
            if (!line.startsWith('#')) {
                include "${websitePublishFolder.name}/${line}/**"
            }
        }
    }

    commitMessage = "Publishing documentation for v${version}"
}


gitPublishCommit.dependsOn installDocs, updateGitLabYmlInPages


task asciidoctorEditorConfig(type: Copy) {

    ext {
        pluginTokens = [
            revnumber: version,
            rootdir: rootDir.absolutePath,
            mingradle: gradleTest.minVersion
        ]
//        pluginTokens = docProjects.collectEntries { proj ->
//            ["plugin-${proj}".toString(), file("${pluginProjectDir(proj)}/src").absolutePath]
//        } + docProjects.collectEntries { proj ->
//            ["api-${proj}".toString(), file("${pluginProjectDir(proj)}/build/docs/groovydoc").absolutePath]
//        } + [
//
//        ]
        additionalAttributes = file('src/docs/asciidoc/attributes.adoc')
    }

    group 'IDE tasks'
    description 'Renders IDE config for Asciidoctor'
    inputs.file additionalAttributes

    from rootProject.file('gradle/docs/asciidoctorconfig-template.txt')
    into rootProject.projectDir
    rename 'asciidoctorconfig-template.txt', '.asciidoctorconfig'

    // try to keep the token list alphabetical.
    filter ReplaceTokens, beginToken: '@@', endToken: '@@', tokens: pluginTokens

    doLast {
        new File(rootProject.projectDir, '.asciidoctorconfig').withWriterAppend { w ->
            w << additionalAttributes.text

        }
    }
}

pluginManager.withPlugin('idea') {
    tasks.ideaModule.dependsOn asciidoctorEditorConfig
}

